# -*- coding: utf-8 -*-
"""02_Up and Running with pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1joqstBiOSSGSnXtGZ9ZMo0moj-HsHWe9

# Configuring pandas
"""

# Commented out IPython magic to ensure Python compatibility.
# import numpy and pandas
import numpy as np
import pandas as pd

# used for dates
import datetime
from datetime import datetime, date

# Set some pandas options controlling output format
pd.set_option('display.notebook_repr_html', False)
pd.set_option('display.max_columns', 8)
pd.set_option('display.max_rows', 10)
pd.set_option('display.width', 80)

# bring in matplotlib for graphics
import matplotlib.pyplot as plt
# %matplotlib inline

"""# The pandas Series"""

# create a four item Series
s = pd.Series([1, 2, 3, 4])
s

# get value at label 1
s[1]

# return a Series with the row with labels 1 and 3
s[[1, 3]]

# create a series using an explicit index
s = pd.Series([1, 2, 3, 4], 
               index = ['a', 'b', 'c', 'd'])
s

# look up items the series having index 'a' and 'd'
s[['a', 'd']]

# passing a list of integers to a Series that has
# non-integer index labels will look up based upon
# 0-based index like an array
s[[1, 2]]

# get only the index of the Series
s.index

# create a Series who's index is a series of dates
# between the two specified dates (inclusive)
dates = pd.date_range('2016-04-01', '2016-04-06')
dates

# create a Series with values (representing temperatures)
# for each date in the index
temps1 = pd.Series([80, 82, 85, 90, 83, 87], 
                   index = dates)
temps1

# what's the temperation for 2016-4-4?
temps1['2016-04-04']

# create a second series of values using the same index
temps2 = pd.Series([70, 75, 69, 83, 79, 77], 
                   index = dates)
# the following aligns the two by their index values
# and calculates the difference at those matching labels
temp_diffs = temps1 - temps2
temp_diffs

# and also possible by integer position as if the 
# series was an array
temp_diffs[2]

# calculate the mean of the values in the Series
temp_diffs.mean()

"""# The pandas DataFrame"""

# create a DataFrame from the two series objects temp1 and temp2
# and give them column names
temps_df = pd.DataFrame(
            {'Missoula': temps1, 
             'Philadelphia': temps2})
temps_df

# get the column with the name Missoula
temps_df['Missoula']

# likewise we can get just the Philadelphia column
temps_df['Philadelphia']

# return both columns in a different order
temps_df[['Philadelphia', 'Missoula']]

# retrieve the Missoula column through property syntax
temps_df.Missoula

# calculate the temperature difference between the two cities
temps_df.Missoula - temps_df.Philadelphia

# add a column to temp_df which contains the difference in temps
temps_df['Difference'] = temp_diffs
temps_df

# get the columns, which is also an Index object
temps_df.columns

# slice the temp differences column for the rows at 
# location 1 through 4 (as though it is an array)
temps_df.Difference[1:4]

# get the row at array position 1
temps_df.iloc[1]

# the names of the columns have become the index
# they have been 'pivoted'
temps_df.iloc[1].index

# retrieve row by index label using .loc
temps_df.loc['2016-04-05']

# get the values in the Differences column in tows 1, 3 and 5
# using 0-based location
temps_df.iloc[[1, 3, 5]].Difference

# which values in the Missoula column are > 82?
temps_df.Missoula > 82

# return the rows where the temps for Missoula > 82
temps_df[temps_df.Missoula > 82]

"""# Loading data from a CSV file into a DataFrame"""

# display the contents of test1.csv
# which command to use depends on your OS
# !head data/goog.csv # on non-windows systems
#!type data/test1.csv # on windows systems, all lines

# read the contents of the file into a DataFrame
df = pd.read_csv('data/goog.csv')
df

# the contents of the date column
df.Date

# we can get the first value in the date column
df.Date[0]

# it is a string
type(df.Date[0])

# read the data and tell pandas the date column should be 
# a date in the resulting DataFrame
df = pd.read_csv('data/goog.csv', parse_dates=['Date'])
df

# verify the type now is date
# in pandas, this is actually a Timestamp
type(df.Date[0])

# unfortunately the index is numeric which makes
# accessing data by date more complicated
df.index

# read in again, now specity the data column as being the 
# index of the resulting DataFrame
df = pd.read_csv('data/goog.csv', 
                 parse_dates=['Date'], 
                 index_col='Date')
df

# and the index is now a DatetimeIndex
df.index

"""# Visualization"""

# plots the values in the Close column
df.Close.plot();